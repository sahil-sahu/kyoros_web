generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hospital {
  id       String    @id @default(cuid())
  name     String
  Beds     Bed[]
  ICUs     ICU[]
  Patients Patient[]
  sensors  Sensor[]
  Users    User[]
  sessions Session[]
  notes    Notes[]
}

model ICU {
  id         Int       @id @default(autoincrement())
  name       String
  hospitalId String
  beds       Bed[]
  hospital   Hospital  @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  watcher    Watcher[]
  // sessions Session[]
}

model Watcher {
  id     Int    @id @default(autoincrement())
  userid String
  icuId  Int
  icu    ICU    @relation(fields: [icuId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userid], references: [id], onDelete: Cascade)

  @@unique([userid, icuId])
  @@index([userid])
  @@index([icuId])
}

model Bed {
  id         Int       @id @default(autoincrement())
  name       String
  icuId      Int
  occupied   Boolean   @default(false)
  patientId  String?   @unique
  updatedAt  DateTime  @default(now()) @updatedAt
  latest     Json?
  apache     Int?      @default(0)
  bedStamp   DateTime?
  hospitalId String
  hospital   Hospital  @relation(fields: [hospitalId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ICU        ICU       @relation(fields: [icuId], references: [id], onDelete: Cascade)
  patient    Patient?  @relation(fields: [patientId], references: [id], onDelete: NoAction)
  bedLogs    Logs[]
  sensor     Sensor?
  // sessions Session[]

  @@index([icuId])
  @@index([patientId])
  @@index([hospitalId])
}

model User {
  id          String    @id @default(cuid())
  userType    UserType
  email       String    @unique
  fireTokens  String[]
  firebaseUid String    @unique
  hospitalId  String
  verified    Boolean   @default(false)
  name        String?
  hospital    Hospital  @relation(fields: [hospitalId], references: [id], onDelete: NoAction)
  watcher     Watcher[]
  notes       Notes[]
}

model Patient {
  id            String       @id @default(cuid())
  bedId         Int?
  gender        String
  name          String
  age           Int?
  email         String?
  phone         String?       @db.VarChar(13)
  hospitalId    String
  dept          String?
  diagnosis     String?
  Medicines     String[]
  Surgeries     String[]
  comorbidities String[]
  uhid          String?
  dob           DateTime     @db.Timestamp(6)
  bed           Bed?
  logs          Logs[]
  sessions      Session[]
  hospital      Hospital     @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  docs          PatientDoc[]
  notes         Notes[]

  @@unique([uhid, hospitalId])
}

// model PatientHistory {
//   id            String   @id @default(cuid())
//   diagnosis     String?
//   comorbidities String[]
//   Surgeries     String[]
//   Medicines     String[]
//   createdAt     DateTime @default(now()) @db.Timestamp(6)
// }

model Logs {
  id         String   @id @default(cuid())
  bp         Int[]
  spo2       Int
  temp       Float?
  timeStamp  DateTime
  patientId  String
  bedID      Int
  sensorid   String?
  heart_rate Int      @default(0)
  pulse      Int      @default(0)
  resp_rate  Int      @default(0)
  bed        Bed      @relation(fields: [bedID], references: [id], onDelete: NoAction)
  patient    Patient  @relation(fields: [patientId], references: [id], onDelete: NoAction)
  sensor     Sensor?  @relation(fields: [sensorid], references: [id], onDelete: NoAction)

  @@index([patientId, timeStamp])
  @@index([bedID, timeStamp])
  @@index([timeStamp])
}

model PatientDoc {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamp(6)
  s3Link    String   @unique
  patientId String
  fileName  String   @unique
  name      String
  tag       Tag?
  patient   Patient  @relation(fields: [patientId], references: [id], onDelete: NoAction)
}

model Sensor {
  id         String   @id @default(cuid())
  bedID      Int?     @unique
  hospitalId String
  logs       Logs[]
  bed        Bed?     @relation(fields: [bedID], references: [id], onDelete: NoAction)
  hospital   Hospital @relation(fields: [hospitalId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([hospitalId])
}

model Session {
  id            String    @id @default(cuid())
  doctorIds     String[]
  nurseIds      String[]
  patientId     String
  bedId         Int[]
  bedName       String
  icuName       String
  icuId         Int[]
  hospitalId    String
  apache        Int
  updatedAt     DateTime  @default(now()) @db.Timestamp(6)
  admittedAt    DateTime  @default(now()) @db.Timestamp(6)
  dischargedAt  DateTime?
  reason        String? //discharging reason
  comorbidities String[]
  diagnosis     String

  // bed        Bed[]      @relation(fields: [bedId], references: [id], onDelete: NoAction)
  // ICU        ICU      @relation(fields: [icuId], references: [id], onDelete: NoAction)
  hospital   Hospital @relation(fields: [hospitalId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patient   Patient   @relation(fields: [patientId], references: [id], onDelete: NoAction)


  @@index([bedId])
  @@index([icuId])
  @@index([hospitalId])
}

model Notes {
  id            String    @id @default(cuid())
  userid        String
  user          User   @relation(fields: [userid], references: [id], onDelete: Cascade)
  note          String
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  patientId     String
  patient       Patient   @relation(fields: [patientId], references: [id], onDelete: NoAction)
  hospitalId    String
  hospital   Hospital @relation(fields: [hospitalId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum UserType {
  admin
  nurse
  doctor
}

enum Tag {
  Pathology
  Radiology
  Microbiology
  General
}
